/*
 * arXiv API
 * Specification of the api described in [arXiv documentation](https://arxiv.org/help/api/user-manua).
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.github.nicholasphair.arxiv.api;

import com.fasterxml.jackson.core.type.TypeReference;

import io.github.nicholasphair.arxiv.ApiClient;
import io.github.nicholasphair.arxiv.ApiException;
import io.github.nicholasphair.arxiv.Configuration;
import io.github.nicholasphair.arxiv.Pair;
import io.github.nicholasphair.arxiv.model.Feed;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-07T23:45:47.078-04:00[America/New_York]")
public class DefaultApi {
  private ApiClient apiClient;

  public DefaultApi() {
    this(Configuration.getDefaultApiClient());
  }

  public DefaultApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Returns a list of users.
   * Optional extended description in CommonMark or HTML.
   * @param searchQuery  (optional)
   * @param idList  (optional
   * @param start  (optional, default to 0)
   * @param maxResults  (optional, default to 10)
   * @param sortBy  (optional)
   * @param sortOrder  (optional)
   * @return Feed
   * @throws ApiException if fails to make API call
   */
  public Feed apiQueryGet(String searchQuery, List<String> idList, Integer start, Integer maxResults, String sortBy, String sortOrder) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/api/query";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("search_query", searchQuery));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "id_list", idList));
    localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
    localVarQueryParams.addAll(apiClient.parameterToPair("max_results", maxResults));
    localVarQueryParams.addAll(apiClient.parameterToPair("sortBy", sortBy));
    localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));

    
    
    
    final String[] localVarAccepts = {
      "application/atom+xml; charset=utf-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Feed> localVarReturnType = new TypeReference<Feed>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
}
